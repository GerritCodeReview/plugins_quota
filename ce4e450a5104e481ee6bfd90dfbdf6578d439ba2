{
  "comments": [
    {
      "key": {
        "uuid": "499ed301_def7c9e3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2020-07-20T08:12:24Z",
      "side": 1,
      "message": "The page open by that link doesn\u0027t provide any further info except \"Identifies undesirable mocks\".\n\nIIUC, the mock is undesirable because the com.google.common.cache.Cache is annotated as @DoNotMock. Maybe finding that commit in guava repository would provide additional\nexplanation for that decision? Especially I would like to refer\nto the DoNotMock annotation docs [1] where it is written:\n\n\"When marking a type @DoNotMock, you should always point to alternative testing solutions such as standard fakes or other testing utilities.\"\n\n[1] https://errorprone.info/api/latest/com/google/errorprone/annotations/DoNotMock.html",
      "revId": "ce4e450a5104e481ee6bfd90dfbdf6578d439ba2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9042475_a8955f34",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2020-07-20T08:27:16Z",
      "side": 1,
      "message": "The corresponding commit in guava is here: https://github.com/google/guava/commit/4eea0f79c27864039a653ec4ca09ef7585e439fc.\n\nSee also a different approach to disable the EP check in: [1], that was abandoned in favor of Luca\u0027s Luca\u0027s fix in multi-site plugin that added substantial boilerplates: [2].\n\n[1] https://gerrit-review.googlesource.com/c/plugins/multi-site/+/275898\n[2] https://gerrit-review.googlesource.com/c/plugins/multi-site/+/275900",
      "parentUuid": "499ed301_def7c9e3",
      "revId": "ce4e450a5104e481ee6bfd90dfbdf6578d439ba2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b70de02_96b6d658",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2020-07-20T08:45:22Z",
      "side": 1,
      "message": "I agree that [2] adds substantial boilerplate code. Can anyone explain why is [2] better than [1] for Gerrit project? I mean the explanation like \"guava annotated Cache with @DoNotMock\" doesn\u0027t provide enough info that would justify all the\nboilerplate introduced with [2] and that will be introduced in many other places.\n\nThere might be a really good reason for the code like [2] but to accept that\n\"pain\" we need to know why is it good for us.",
      "parentUuid": "e9042475_a8955f34",
      "revId": "ce4e450a5104e481ee6bfd90dfbdf6578d439ba2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb149bc6_89a483de",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2020-07-20T09:31:51Z",
      "side": 1,
      "message": "However, the boilerplate is needed for one specific test, that also exists in this plugin and was disabled by this change:\n\n  @Test\n  public void testDoFilterCacheMiss() throws IOException, ServletException, ExecutionException {\n    setUpRegisteredUser();\n    restReqFilter.doFilter(req, res, chain);\n    // TODO(davido): cache instance is not mocked so that cache access doesn\u0027t throw exception\n    // verify(res, times(0)).sendError(eq(SC_TOO_MANY_REQUESTS), anyString());\n  }\n\nThat was relying on this mocking facility:\n\n  when(limitsPerAccount.get(accountId)).thenThrow(new ExecutionException(null));\n\nCan you explain, what this test is actually testing? And why would cache acces method throw ExecutionException exception and what problem in real production code path that test is actually checking. What would this plugin lose, if that test would just be removed?\n\nAnother observation is that RateLimitUploadListenerTest class doesn\u0027t have that test, but only Rest-related test class.",
      "parentUuid": "3b70de02_96b6d658",
      "revId": "ce4e450a5104e481ee6bfd90dfbdf6578d439ba2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "741e0f1e_884db0c0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2020-07-28T13:39:11Z",
      "side": 1,
      "message": "\u003e However, the boilerplate is needed for one specific test, that also exists in this plugin and was disabled by this change:\n\u003e \n\u003e   @Test\n\u003e   public void testDoFilterCacheMiss() throws IOException, ServletException, ExecutionException {\n\u003e     setUpRegisteredUser();\n\u003e     restReqFilter.doFilter(req, res, chain);\n\u003e     // TODO(davido): cache instance is not mocked so that cache access doesn\u0027t throw exception\n\u003e     // verify(res, times(0)).sendError(eq(SC_TOO_MANY_REQUESTS), anyString());\n\u003e   }\n\u003e \n\u003e That was relying on this mocking facility:\n\u003e \n\u003e   when(limitsPerAccount.get(accountId)).thenThrow(new ExecutionException(null));\n\u003e \n\u003e Can you explain, what this test is actually testing?\n\nI checked that code and I cannot explain. The ExecutionException is throws\nwhen a cache loader throws a (runtime) exception while loading a value (which\nwasn\u0027t present in the cache). The thrown ExecutionException wraps the root\ncause exception. However, I don\u0027t see a need for testing this behavior here\nand I don\u0027t also see why would we (in that case) reject all requests as\nif the rate limit was exceeded.\n\nI suggest to remove this test.",
      "parentUuid": "cb149bc6_89a483de",
      "revId": "ce4e450a5104e481ee6bfd90dfbdf6578d439ba2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}