{
  "comments": [
    {
      "key": {
        "uuid": "95446258_2f3f89e0",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/quota/PersistentCounter.java",
        "patchSetId": 14
      },
      "lineNbr": 22,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2014-10-22T08:38:05Z",
      "side": 1,
      "message": "Don\u0027t import NameKey as there are many of them. Use Project.NameKey.",
      "revId": "4468025b2dc5df2137c3b5c038db0b716823873c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b53fa6b4_706a10e0",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/quota/PersistentCounter.java",
        "patchSetId": 14
      },
      "lineNbr": 22,
      "author": {
        "id": 1007114
      },
      "writtenOn": "2014-10-22T09:01:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "95446258_2f3f89e0",
      "revId": "4468025b2dc5df2137c3b5c038db0b716823873c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "95446258_0f44c572",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/quota/PersistentCounter.java",
        "patchSetId": 14
      },
      "lineNbr": 137,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2014-10-22T08:38:05Z",
      "side": 1,
      "message": "Any counter update which happens between selecting its current value, in the getAll(), and setting its value to zero, in the setAllToZero(), will be lost.\n\nFor example, counter C1 has current value 5 for project P at the moment when it is selected in getAll(). It then gets incremented twice (so it is at 7) before it is reset to zero. These two updates will be lost.\n\nI don\u0027t know if H2 supports any kind of atomic select-and-update statement which would work like the AtomicLong.getAndSet method. If this is not possible then, what could possibly help to avoid losing the updates, would be to decrement the counter by the selected value instead of resetting it to zero.\n\nComing back to the example: instead of setting the C1 to zero, decrement its value by 5, so it then becomes 2.\n\nTo further reduce the time between a value is fetched and decremented I would propose to do these two operations as close as possible for each counter.\nInstead of:\n\n  SELECT C1, SELECT C2,  ... SELECT Cn, UPDATE C1, UPDATE C2, ... UPDATE Cn\n\nhave:\n  SELECT C1, UPDATE C1, SELECT C2, UPDATE C2, ... SELECT Cn, UPDATE Cn",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 137,
        "endChar": 23
      },
      "revId": "4468025b2dc5df2137c3b5c038db0b716823873c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b53fa6b4_d07adcaa",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/quota/PersistentCounter.java",
        "patchSetId": 14
      },
      "lineNbr": 137,
      "author": {
        "id": 1007114
      },
      "writtenOn": "2014-10-22T09:01:45Z",
      "side": 1,
      "message": "\u003e SELECT C1, UPDATE C1, SELECT C2, UPDATE C2, ...\n\nThis would come down to 2 * n statements instead of 2. Sure about this?",
      "parentUuid": "95446258_0f44c572",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 137,
        "endChar": 23
      },
      "revId": "4468025b2dc5df2137c3b5c038db0b716823873c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b53fa6b4_b0875835",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/quota/PersistentCounter.java",
        "patchSetId": 14
      },
      "lineNbr": 137,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2014-10-22T09:15:04Z",
      "side": 1,
      "message": "If we agree on the issue of lost updates then the number of statements has to increase anyway, as we cannot update all counters to zero in one statement anymore.\n\nAt least the number of update statements has to increase.\n\nI think it is acceptable to still select all counters in one select. So we will have n+ 1 statments:\n\nSELECT all, UPDATE C1, ...UPDATE Cn",
      "parentUuid": "b53fa6b4_d07adcaa",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 137,
        "endChar": 23
      },
      "revId": "4468025b2dc5df2137c3b5c038db0b716823873c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f5bafe9a_ca0a4346",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/quota/PersistentCounter.java",
        "patchSetId": 14
      },
      "lineNbr": 137,
      "author": {
        "id": 1007114
      },
      "writtenOn": "2014-10-27T12:17:36Z",
      "side": 1,
      "message": "Now locking the table with SELECT FOR UPDATE. Added a test to assert it works.",
      "parentUuid": "b53fa6b4_b0875835",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 137,
        "endChar": 23
      },
      "revId": "4468025b2dc5df2137c3b5c038db0b716823873c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b53fa6b4_107984b8",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/quota/PersistentCounter.java",
        "patchSetId": 14
      },
      "lineNbr": 190,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2014-10-22T08:58:22Z",
      "side": 1,
      "message": "I don\u0027t know if we have a code style agreement for the cases like this where we open more than one AutoCloseable. With the code style like this the indentation level will increase by the number of AutoCloseable resources.\n\nAn alternative approach, which would increase the indentation level only be one regardless of the number of the AutoCloseables is to open all of them in the same try-with-resources block:\n\n  try (\n      PreparesStatement stmt \u003d ... ;\n      ResultSet \u003d stmt.executeQuery()) {\n    ... body ...\n  }",
      "range": {
        "startLine": 189,
        "startChar": 0,
        "endLine": 190,
        "endChar": 50
      },
      "revId": "4468025b2dc5df2137c3b5c038db0b716823873c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "95446258_4f588d4a",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/quota/PersistentCounter.java",
        "patchSetId": 14
      },
      "lineNbr": 190,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2014-10-22T09:04:43Z",
      "side": 1,
      "message": "AFAIK we prefer one try-catch-block which opens all resources.",
      "parentUuid": "b53fa6b4_107984b8",
      "range": {
        "startLine": 189,
        "startChar": 0,
        "endLine": 190,
        "endChar": 50
      },
      "revId": "4468025b2dc5df2137c3b5c038db0b716823873c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b53fa6b4_304da888",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/quota/PersistentCounter.java",
        "patchSetId": 14
      },
      "lineNbr": 190,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2014-10-22T09:20:37Z",
      "side": 1,
      "message": "Trying to clarify this in [1]\n\n[1] https://gerrit-review.googlesource.com/61013",
      "parentUuid": "95446258_4f588d4a",
      "range": {
        "startLine": 189,
        "startChar": 0,
        "endLine": 190,
        "endChar": 50
      },
      "revId": "4468025b2dc5df2137c3b5c038db0b716823873c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "95446258_afdb79f9",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/quota/PersistentCounter.java",
        "patchSetId": 14
      },
      "lineNbr": 190,
      "author": {
        "id": 1007114
      },
      "writtenOn": "2014-10-23T16:07:34Z",
      "side": 1,
      "message": "That\u0027s unfair. You can\u0027t change the rules in the middle of the game ;-).",
      "parentUuid": "b53fa6b4_304da888",
      "range": {
        "startLine": 189,
        "startChar": 0,
        "endLine": 190,
        "endChar": 50
      },
      "revId": "4468025b2dc5df2137c3b5c038db0b716823873c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "95446258_6fe7d1c0",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/quota/PersistentCounter.java",
        "patchSetId": 14
      },
      "lineNbr": 190,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2014-10-23T16:10:25Z",
      "side": 1,
      "message": "Yes, it would be unfair to do it this way.\n\nHowever, before doing that I checked Gerrit\u0027s source code and found out that, indeed, we do open multiple AutoCloseables in the same try block. So, I actually documented current state only.",
      "parentUuid": "95446258_afdb79f9",
      "range": {
        "startLine": 189,
        "startChar": 0,
        "endLine": 190,
        "endChar": 50
      },
      "revId": "4468025b2dc5df2137c3b5c038db0b716823873c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55c2ea1e_6d4a5583",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/quota/PersistentCounter.java",
        "patchSetId": 14
      },
      "lineNbr": 190,
      "author": {
        "id": 1007114
      },
      "writtenOn": "2014-10-27T12:17:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b53fa6b4_107984b8",
      "range": {
        "startLine": 189,
        "startChar": 0,
        "endLine": 190,
        "endChar": 50
      },
      "revId": "4468025b2dc5df2137c3b5c038db0b716823873c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "95446258_ef0f414d",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/quota/PersistentCounterExceptionTest.java",
        "patchSetId": 14
      },
      "lineNbr": 75,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2014-10-22T08:38:05Z",
      "side": 1,
      "message": "I still think that making sure an exception is not swallowed belongs more to a code-style check and less to a unit test... but will accept this test if you consider it so important.",
      "range": {
        "startLine": 58,
        "startChar": 0,
        "endLine": 75,
        "endChar": 3
      },
      "revId": "4468025b2dc5df2137c3b5c038db0b716823873c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}